#!/bin/sh
# shellcheck shell=dash

set -e

# Usage prints the help for this command.
usage() {
  >&2 cat <<EOF
Usage:
    docker-build [OPTIONS]
    docker-build COMMAND [OPTIONS]

Docker CLI wrapper that injects defaults for a more consistent
CI process. Currently only works in CircleCI.

Running docker-build with no COMMAND will do build-with-cache
and then push automatically.

Any OPTIONS specified will be passed to 'docker build' (if applicable).

Commands:
    pull              Attempt to pull the latest cache tag to build a layer cache
    build             Build a docker image from this repo and tag it with the git SHA1 and branch
    build-with-cache  Build with automatic --cache-from
    push              Push the built image to the docker registry

Tags:
    The following tags will be built and pushed by default:
      \$REPO:\$SHA1
      \$REPO:\$BRANCH
      \$REPO:latest

    If NO_EXTRA_TAGS is set, only "latest" will be used, unless the branch is
    "master", in which case it will also tag "master".

    Cache will be used following tags if they exist:
      \$REPO:\$BRANCH
      \$REPO:master
      \$REPO:latest

Examples:
    Basic usage:
      $ docker-build

    Build, but don't tag with branch and SHA1 tags:
      $ NO_EXTRA_TAGS=1 docker-build build

    Build and push an image with a multi-stage Dockerfile:
      $ docker-build --target main

    Build with buildkit (Docker >= 19.03):
      $ DOCKER_BUILDKIT=1 docker-build
EOF
}

# Performs a docker pull, and outputs the image reference to stdout if successfull
docker_pull() {
  local ref="$1"
  docker pull "$ref" 1>&2 && echo "$ref"
}

pull() {
  docker_pull "$REPO:$BRANCH" \
    || docker_pull "$REPO:master" \
    || docker_pull "$REPO:latest" \
    || echo "$REPO"
}

# Build builds the docker image and tags it with the git sha and branch.
build() {
  local args=""
  for tag in $TAGS; do
    args="$args -t $REPO:$tag"
  done
  if [ "$DOCKER_BUILDKIT" = "1" ]; then
    # Always include BuildKit inline cache when BuildKit is enabled, this
    # allows --cache-from to work for multi-stage builds.
    # BuildKit's default progress output is nice in interactive terminals but
    # not so much in CI where we want simple sequential logs, so we also always
    # set progress to plain with BuildKit.
    args="$args --build-arg BUILDKIT_INLINE_CACHE=1 --progress plain"
  fi

  # Quoting $args will break this since ash doesn't support field splitting on
  # anything other than "$@" - disabling shellcheck so that we don't get a
  # warning.
  # shellcheck disable=SC2086
  docker build \
    --build-arg "GIT_COMMIT=$SHA" \
    --build-arg "GIT_BRANCH=$BRANCH" \
    $args \
    "$@" \
    .
}

build_with_cache() {
  if [ "$DOCKER_BUILDKIT" = "1" ]; then
    build \
      --cache-from "$REPO:$BRANCH" \
      --cache-from "$REPO:master" \
      --cache-from "$REPO:latest" \
      "$@"
  else
    build \
      --cache-from "$(pull)" \
      "$@"
  fi
}

# Push pushes all of the built docker images.
push() {
  for tag in $TAGS; do
    docker push "$REPO:$tag"
  done
}

run() {
  build_with_cache "$@" && push
}

# Main -------------------------------------------------

case "$1" in
  help|-h|--help) usage; exit 1 ;;
esac

if [ -n "$CIRCLECI" ]; then
  REPO="$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME"
  BRANCH="$CIRCLE_BRANCH"
  SHA="$CIRCLE_SHA1"
else
  >&2 echo "This script only works on CircleCI right now."
  exit 1
fi

if [ "$DOCKER_BUILDKIT" = 1 ]; then
  docker_version="$(docker version -f "{{.Server.Version}}")"
  docker_version_maj="$(echo "$docker_version" | cut -d'.' -f 1)"
  docker_version_min="$(echo "$docker_version" | cut -d'.' -f 2)"
  if [ "$docker_version_maj" -lt 19 ] \
    || { [ "$docker_version_maj" -eq 19 ] && [ "$docker_version_min" -lt 3 ]; }; then
    >&2 echo "Docker engine version ${docker_version} is too old, must be >= 19.03 to use buildkit"
    exit 1
  fi
fi

if [ -n "$NO_EXTRA_TAGS" ]; then
  if [ "$BRANCH" = "master" ]; then
    TAGS="$BRANCH latest"
  else
    TAGS="latest"
  fi
else
  TAGS="$SHA $BRANCH latest"
fi

cmd="$1"
case "$cmd" in
  pull)
    shift; pull ;;
  build)
    shift; build "$@" ;;
  build-with-cache)
    shift; build_with_cache "$@" ;;
  push)
    shift; push ;;
  *)
    run "$@" ;;
esac
