#!/usr/bin/env bash
set -euo pipefail

if [ -n "${CIRCLECI+x}" ]; then
	REPO="$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME"
	BRANCH="$CIRCLE_BRANCH"
	SHA="$CIRCLE_SHA1"
	BUILD="$CIRCLE_BUILD_NUM"
else
	echo "This script only works on CircleCI right now." >&2
	exit 1
fi

branch_tag="$(echo -n "$BRANCH" | tr -c '[:alnum:]-._' '-')"
tags=("$SHA" "$branch_tag" "${branch_tag}-${BUILD}" latest)

# Create ECR repository if it doesn't already exist.
echo "ensuring ECR repository exists with the right lifecycle policy" >&2
aws ecr describe-repositories \
	--region "$AWS_REGION" \
	--repository-name "$REPO" \
	>/dev/null 2>&1 \
	|| aws ecr create-repository \
	--region "$AWS_REGION" \
	--repository-name "$REPO" \
	--image-scanning-configuration scanOnPush=true

# Install the default ECR lifecycle policy.
aws ecr put-lifecycle-policy \
	--region "$AWS_REGION" \
	--repository-name "$REPO" \
	--lifecycle-policy-text "$(cat /default-ecr-lifecycle-policy.json)"

# Log in to Docker Hub
echo "logging in to Docker Hub" >&2
printenv DOCKER_PASS | docker login --username "$DOCKER_USER" --password-stdin

# Log in to ECR
echo "logging in to ECR" >&2
aws ecr get-login-password --region "$AWS_REGION" \
	| docker login --username AWS --password-stdin "$AWS_ECR_ACCOUNT_URL"

# Run docker build
echo "running docker build" >&2
build_args=(
	"--build-arg" "GIT_COMMIT=${SHA}"
	"--build-arg" "GIT_BRANCH=${BRANCH}"

	# Always include BuildKit inline cache when BuildKit is enabled, this
	# allows --cache-from to work for multi-stage builds.
	# BuildKit's default progress output is nice in interactive terminals but
	# not so much in CI where we want simple sequential logs, so we also always
	# set progress to plain with BuildKit.
	"--build-arg" "BUILDKIT_INLINE_CACHE=1"
)
for tag in "${tags[@]}"; do
	build_args+=("--cache-from" "${REPO}:${tag}")
	build_args+=("-t" "${REPO}:${tag}")
done
set -x
docker build "${build_args[@]}" "$@" "${DOCKER_BUILD_PATH:-.}"
set +x

# Push images
registries=("docker.io" "$AWS_ECR_ACCOUNT_URL")
for registry in "${registries[@]}"; do
	for tag in "${tags[@]}"; do
		echo "pushing ${registry}/${REPO}:${tag}" >&2
		docker tag "${REPO}:${tag}" "${registry}/${REPO}:${tag}"
		docker push "${registry}/${REPO}:${tag}"
	done
done
